/*
 * @Author: Qbenben
 * @Date: 2020-02-02 19:01:22
 * @LastEditors  : Qbenben
 * @LastEditTime : 2020-02-02 19:17:10
 * @Description: 066 - 加一（plus-one）
 * 
 * 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
 * 最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。
 * 你可以假设除了整数 0 之外，这个整数不会以零开头。
 * 示例 1:
 * 输入: [1,2,3]
 * 输出: [1,2,4]
 * 解释: 输入数组表示数字 123。
 * 
 * 示例 2:
 * 输入: [4,3,2,1]
 * 输出: [4,3,2,2]
 * 解释: 输入数组表示数字 4321。
 */


var testArr = [9, 9, 9];
/**
 * @description: 数学运算
 * 首先，末尾开始遍历，正常情况下直到 i 小于 0 的时候终止循环。
 * 然后，当碰到 111、236 这类末尾非 9 的情况时。
 * 我们会先让其 (末位 + 1) % 10。因为我们知道，1 至 9 中任意的数 % 10，得到的答案还是 1 - 9，但是 10 % 10，得到的答案是 0 ！
 * 所以当 111、236 这种情况，末尾数字 (1 + 1) % 10、(6 + 1) % 10 后，得到的数字 2 和 7 会大于 0。因为它大于 0 ，所以我们直接 return 出来即可。
 * @param {arr} 由整数组成的非空数组所表示的非负整数
 * @return: {Array} 加一的数组   
 */
var plusOne_1 = function(arr) {
  for (let i = arr.length - 1; i >= 0; i--) {
    arr[i]++;
    arr[i] = arr[i] % 10;
    if (arr[i] > 0) {
      return arr;
    }
  }
  return [1, ...arr];
}

console.log(plusOne_1(testArr));